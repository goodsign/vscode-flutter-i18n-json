import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unnecessary_brace_in_string_interps

//WARNING: This file is automatically generated. DO NOT EDIT, all your changes would be lost.

typedef LocaleChangeCallback = void Function(Locale locale);

class I18n implements WidgetsLocalizations {
  const I18n();
  static Locale _locale;
  static bool _shouldReload = false;

  static set locale(Locale newLocale) {
    _shouldReload = true;
    I18n._locale = newLocale;
  }

  static const GeneratedLocalizationsDelegate delegate = GeneratedLocalizationsDelegate();

  /// function to be invoked when changing the language
  static LocaleChangeCallback onLocaleChanged;

  static I18n of(BuildContext context) =>
    Localizations.of<I18n>(context, WidgetsLocalizations);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  /// "Home"
  String get homeTitle => "Home";
  /// "Lists"
  String get userLists => "Lists";
  /// "Favorites"
  String get userFavorites => "Favorites";
  /// "Downloads"
  String get userDownloads => "Downloads";
  /// "Preferences"
  String get userPreferences => "Preferences";
  /// "Dark mode"
  String get userDarkMode => "Dark mode";
  /// "Wi-Fi Only"
  String get userWifiOnly => "Wi-Fi Only";
  /// "Play in background"
  String get userPlayInBackground => "Play in background";
  /// "Allow notifications"
  String get userAllowNotifications => "Allow notifications";
  /// "Account"
  String get userAccount => "Account";
  /// "Profile settings"
  String get userProfileSettings => "Profile settings";
  /// "Billing"
  String get userBilling => "Billing";
  /// "Help"
  String get userHelp => "Help";
  /// "Report a problem"
  String get userReportProblem => "Report a problem";
  /// "Logout"
  String get userLogout => "Logout";
  /// "Subscribe"
  String get videoSubscribe => "Subscribe";
  /// "Sign Up"
  String get videoSignUp => "Sign Up";
  /// "Start a free 7 days trial"
  String get subscriptionStartTrial => "Start a free 7 days trial";
  /// "${price}/mo after trial. Cancel anytime."
  String subscriptionAfterTrial(String price) => "${price}/mo after trial. Cancel anytime.";
  /// "Sign in"
  String get subscriptionSignIn => "Sign in";
  /// "Restore Purchases"
  String get subscriptionRestorePurchases => "Restore Purchases";
  /// "Terms"
  String get subscriptionTerms => "Terms";
  /// "Privacy policy"
  String get subscriptionPrivacyPolicy => "Privacy policy";
  /// "WELCOME!"
  String get registrationWelcome => "WELCOME!";
  /// "Start exploring our catalog by signing up"
  String get registrationStartBy => "Start exploring our catalog by signing up";
  /// "You should have a password"
  String get registrationShouldHavePassword => "You should have a password";
  /// "Email address"
  String get registrationEmailAddress => "Email address";
  /// "Password"
  String get registrationPassword => "Password";
  /// "Sign Up"
  String get registrationSignUp => "Sign Up";
  /// "Search..."
  String get searchHint => "Search...";
}

class _I18n_en_US extends I18n {
  const _I18n_en_US();

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class _I18n_ru_RU extends I18n {
  const _I18n_ru_RU();

  /// "Главная"
  @override
  String get homeTitle => "Главная";
  /// "Списки"
  @override
  String get userLists => "Списки";
  /// "Избранное"
  @override
  String get userFavorites => "Избранное";
  /// "Загрузки"
  @override
  String get userDownloads => "Загрузки";
  /// "Настройки"
  @override
  String get userPreferences => "Настройки";
  /// "Темный режим"
  @override
  String get userDarkMode => "Темный режим";
  /// "Wi-Fi режим"
  @override
  String get userWifiOnly => "Wi-Fi режим";
  /// "Проигрывать в фоне"
  @override
  String get userPlayInBackground => "Проигрывать в фоне";
  /// "Разрешить оповещения"
  @override
  String get userAllowNotifications => "Разрешить оповещения";
  /// "Аккаунт"
  @override
  String get userAccount => "Аккаунт";
  /// "Настройки профиля"
  @override
  String get userProfileSettings => "Настройки профиля";
  /// "Биллинг"
  @override
  String get userBilling => "Биллинг";
  /// "Помощь"
  @override
  String get userHelp => "Помощь";
  /// "Сообщить о проблеме"
  @override
  String get userReportProblem => "Сообщить о проблеме";
  /// "Выйти"
  @override
  String get userLogout => "Выйти";
  /// "Подписаться"
  @override
  String get videoSubscribe => "Подписаться";
  /// "Зарегистрироваться"
  @override
  String get videoSignUp => "Зарегистрироваться";

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<WidgetsLocalizations> {
  const GeneratedLocalizationsDelegate();
  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", "US"),
      Locale("ru", "RU")
    ];
  }

  LocaleResolutionCallback resolution({Locale fallback}) {
    return (Locale locale, Iterable<Locale> supported) {
      if (isSupported(locale)) {
        return locale;
      }
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    };
  }

  @override
  Future<WidgetsLocalizations> load(Locale locale) {
    I18n._locale ??= locale;
    I18n._shouldReload = false;
    final String lang = I18n._locale != null ? I18n._locale.toString() : "";
    final String languageCode = I18n._locale != null ? I18n._locale.languageCode : "";
    if ("en_US" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }
    else if ("ru_RU" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_ru_RU());
    }
    else if ("en" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }
    else if ("ru" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_ru_RU());
    }

    return SynchronousFuture<WidgetsLocalizations>(const I18n());
  }

  @override
  bool isSupported(Locale locale) {
    for (var i = 0; i < supportedLocales.length && locale != null; i++) {
      final l = supportedLocales[i];
      if (l.languageCode == locale.languageCode) {
        return true;
      }
    }
    return false;
  }

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => I18n._shouldReload;
}